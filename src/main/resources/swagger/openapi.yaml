openapi: 3.0.3
info:
  title: BackEnd Banking Project Manager
  contact:
    email: phsouzaro@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/v1
tags:
  - name: transaction
    description: Access to Transactions
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged off user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUserResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transaction:
    post:
      tags:
        - transaction
      summary: Create transaction
      description: This can only be done by the logged in user.
      operationId: makeTransaction
      requestBody:
        description: Created transaction object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        "500":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


components:
  schemas:
    UserRequest:
      type: object
      properties:
        fullName:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        cpfCnpj:
          type: string
          example: '12345678910'
          minLength: 11
          maxLength: 14
      required:
        - fullName
        - email
        - password
        - cpfCnpj

    CreatedUserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: "Nome do usuario"
        accountNumber:
          type: string
          example: "312udncvuhsd901231cml"

    TransactionRequest:
      type: object
      properties:
        value:
          type: integer
          format: int64
        payer:
          type: integer
          format: int32
        payee:
          type: integer
          format: int32
      required:
        - value
        - payer
        - payee

    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        transactionStatus:
          type: string
          enum:
            - DONE
            - REJECTED
            - REFUNDED

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 500
        description:
          type: string
          example: "Erro ao cadastrar Usu√°rio"
        detailedMessage:
          type: string
          example: "SQL Exception -- etc"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Erro'

    Erro:
      type: object
      properties:
        class:
          type: string
          example: "User"
        field:
          type: string
          example: "User.email"
        error:
          type: string
          example: "Campo nao pode ser nulo"
